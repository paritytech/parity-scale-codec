[package]
name = "parity-scale-codec"
description = "SCALE - Simple Concatenating Aggregated Little Endians"
version = "3.6.9"
authors = ["Parity Technologies <admin@parity.io>"]
license = "Apache-2.0"
repository = "https://github.com/paritytech/parity-scale-codec"
categories = ["encoding"]
edition = "2021"
rust-version = "1.60.0"

[dependencies]
arrayvec = { version = "0.7", default-features = false }
serde = { version = "1.0.193", default-features = false, optional = true }
parity-scale-codec-derive = { path = "derive", version = ">= 3.6.9", default-features = false, optional = true }
bitvec = { version = "1", default-features = false, features = [ "alloc" ], optional = true }
bytes = { version = "1", default-features = false, optional = true }
byte-slice-cast = { version = "1.2.2", default-features = false }
generic-array = { version = "0.14.7", optional = true }
arbitrary = { version = "1.3.2", features = ["derive"], optional = true }
impl-trait-for-tuples = "0.2.2"

[dev-dependencies]
criterion = "0.4.0"
serde_derive = { version = "1.0" }
parity-scale-codec-derive = { path = "derive", default-features = false }
quickcheck = "1.0"
proptest = "1.3.1"
trybuild = "1.0.85"
paste = "1"

[[bench]]
name = "benches"
harness = false

[lib]
bench = false

[features]
default = ["std"]
derive = ["parity-scale-codec-derive"]
std = ["serde/std", "bitvec?/std", "byte-slice-cast/std", "chain-error"]
bit-vec = ["bitvec"]
fuzz = ["std", "arbitrary"]

# Enables the new `MaxEncodedLen` trait.
# NOTE: This is still considered experimental and is exempt from the usual
# SemVer guarantees. We do not guarantee no code breakage when using this.
max-encoded-len = ["parity-scale-codec-derive?/max-encoded-len"]

# Make error fully descriptive with chaining error message.
# Should not be used in a constrained environment.
chain-error = []

# This does not do anthing anymore. Remove with the next major release.
full = []

[workspace]
members = ["derive", "fuzzer"]
